// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: carbonapi_v3_pb.proto

package carbonapi_v3_pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FilteringFunction struct {
	Name      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Arguments []string `protobuf:"bytes,2,rep,name=arguments" json:"arguments,omitempty"`
}

func (m *FilteringFunction) Reset()      { *m = FilteringFunction{} }
func (*FilteringFunction) ProtoMessage() {}
func (*FilteringFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{0}
}
func (m *FilteringFunction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilteringFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilteringFunction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FilteringFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilteringFunction.Merge(dst, src)
}
func (m *FilteringFunction) XXX_Size() int {
	return m.Size()
}
func (m *FilteringFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_FilteringFunction.DiscardUnknown(m)
}

var xxx_messageInfo_FilteringFunction proto.InternalMessageInfo

func (m *FilteringFunction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FilteringFunction) GetArguments() []string {
	if m != nil {
		return m.Arguments
	}
	return nil
}

// Fetch Storage Capabilities
type CapabilityRequest struct {
}

func (m *CapabilityRequest) Reset()      { *m = CapabilityRequest{} }
func (*CapabilityRequest) ProtoMessage() {}
func (*CapabilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{1}
}
func (m *CapabilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapabilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapabilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapabilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapabilityRequest.Merge(dst, src)
}
func (m *CapabilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *CapabilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CapabilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CapabilityRequest proto.InternalMessageInfo

// Storage capability information
type CapabilityResponse struct {
	// carbonapi_v2_pb, carbonapi_v3_pb, etc.
	SupportedProtocols []string `protobuf:"bytes,1,rep,name=supportedProtocols" json:"supportedProtocols,omitempty"`
	// server name
	Name                      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	HighPrecisionTimestamps   bool   `protobuf:"varint,3,opt,name=highPrecisionTimestamps,proto3" json:"highPrecisionTimestamps,omitempty"`
	SupportFilteringFunctions bool   `protobuf:"varint,4,opt,name=supportFilteringFunctions,proto3" json:"supportFilteringFunctions,omitempty"`
	// true if storage will behave normally if request is splitted by maxGlobs
	LikeSplittedRequests bool `protobuf:"varint,5,opt,name=likeSplittedRequests,proto3" json:"likeSplittedRequests,omitempty"`
	SupportStreaming     bool `protobuf:"varint,6,opt,name=supportStreaming,proto3" json:"supportStreaming,omitempty"`
}

func (m *CapabilityResponse) Reset()      { *m = CapabilityResponse{} }
func (*CapabilityResponse) ProtoMessage() {}
func (*CapabilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{2}
}
func (m *CapabilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapabilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapabilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapabilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapabilityResponse.Merge(dst, src)
}
func (m *CapabilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *CapabilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CapabilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CapabilityResponse proto.InternalMessageInfo

func (m *CapabilityResponse) GetSupportedProtocols() []string {
	if m != nil {
		return m.SupportedProtocols
	}
	return nil
}

func (m *CapabilityResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CapabilityResponse) GetHighPrecisionTimestamps() bool {
	if m != nil {
		return m.HighPrecisionTimestamps
	}
	return false
}

func (m *CapabilityResponse) GetSupportFilteringFunctions() bool {
	if m != nil {
		return m.SupportFilteringFunctions
	}
	return false
}

func (m *CapabilityResponse) GetLikeSplittedRequests() bool {
	if m != nil {
		return m.LikeSplittedRequests
	}
	return false
}

func (m *CapabilityResponse) GetSupportStreaming() bool {
	if m != nil {
		return m.SupportStreaming
	}
	return false
}

// Fetch Data
type FetchRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StartTime int64  `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	StopTime  int64  `protobuf:"varint,3,opt,name=stopTime,proto3" json:"stopTime,omitempty"`
	// Should be true if our request requires more precision than seconds.
	HighPrecisionTimestamps bool                 `protobuf:"varint,4,opt,name=highPrecisionTimestamps,proto3" json:"highPrecisionTimestamps,omitempty"`
	PathExpression          string               `protobuf:"bytes,5,opt,name=pathExpression,proto3" json:"pathExpression,omitempty"`
	FilterFunctions         []*FilteringFunction `protobuf:"bytes,6,rep,name=filterFunctions" json:"filterFunctions,omitempty"`
	MaxDataPoints           int64                `protobuf:"varint,7,opt,name=maxDataPoints,proto3" json:"maxDataPoints,omitempty"`
}

func (m *FetchRequest) Reset()      { *m = FetchRequest{} }
func (*FetchRequest) ProtoMessage() {}
func (*FetchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{3}
}
func (m *FetchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FetchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchRequest.Merge(dst, src)
}
func (m *FetchRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchRequest proto.InternalMessageInfo

func (m *FetchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FetchRequest) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *FetchRequest) GetStopTime() int64 {
	if m != nil {
		return m.StopTime
	}
	return 0
}

func (m *FetchRequest) GetHighPrecisionTimestamps() bool {
	if m != nil {
		return m.HighPrecisionTimestamps
	}
	return false
}

func (m *FetchRequest) GetPathExpression() string {
	if m != nil {
		return m.PathExpression
	}
	return ""
}

func (m *FetchRequest) GetFilterFunctions() []*FilteringFunction {
	if m != nil {
		return m.FilterFunctions
	}
	return nil
}

func (m *FetchRequest) GetMaxDataPoints() int64 {
	if m != nil {
		return m.MaxDataPoints
	}
	return 0
}

type MultiFetchRequest struct {
	Metrics []FetchRequest `protobuf:"bytes,1,rep,name=metrics" json:"metrics"`
}

func (m *MultiFetchRequest) Reset()      { *m = MultiFetchRequest{} }
func (*MultiFetchRequest) ProtoMessage() {}
func (*MultiFetchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{4}
}
func (m *MultiFetchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiFetchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiFetchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MultiFetchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiFetchRequest.Merge(dst, src)
}
func (m *MultiFetchRequest) XXX_Size() int {
	return m.Size()
}
func (m *MultiFetchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiFetchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MultiFetchRequest proto.InternalMessageInfo

func (m *MultiFetchRequest) GetMetrics() []FetchRequest {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// Stop time can be computed by stepTime*len(values)
type FetchResponse struct {
	Name              string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PathExpression    string  `protobuf:"bytes,2,opt,name=pathExpression,proto3" json:"pathExpression,omitempty"`
	ConsolidationFunc string  `protobuf:"bytes,3,opt,name=consolidationFunc,proto3" json:"consolidationFunc,omitempty"`
	StartTime         int64   `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	StopTime          int64   `protobuf:"varint,5,opt,name=stopTime,proto3" json:"stopTime,omitempty"`
	StepTime          int64   `protobuf:"varint,6,opt,name=stepTime,proto3" json:"stepTime,omitempty"`
	XFilesFactor      float32 `protobuf:"fixed32,7,opt,name=xFilesFactor,proto3" json:"xFilesFactor,omitempty"`
	// Should be true if timestamps have better precision than seconds.
	HighPrecisionTimestamps bool      `protobuf:"varint,8,opt,name=highPrecisionTimestamps,proto3" json:"highPrecisionTimestamps,omitempty"`
	Values                  []float64 `protobuf:"fixed64,9,rep,packed,name=values" json:"values,omitempty"`
	AppliedFunctions        []string  `protobuf:"bytes,10,rep,name=appliedFunctions" json:"appliedFunctions,omitempty"`
	RequestStartTime        int64     `protobuf:"varint,11,opt,name=requestStartTime,proto3" json:"requestStartTime,omitempty"`
	RequestStopTime         int64     `protobuf:"varint,12,opt,name=requestStopTime,proto3" json:"requestStopTime,omitempty"`
}

func (m *FetchResponse) Reset()      { *m = FetchResponse{} }
func (*FetchResponse) ProtoMessage() {}
func (*FetchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{5}
}
func (m *FetchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FetchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchResponse.Merge(dst, src)
}
func (m *FetchResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchResponse proto.InternalMessageInfo

func (m *FetchResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FetchResponse) GetPathExpression() string {
	if m != nil {
		return m.PathExpression
	}
	return ""
}

func (m *FetchResponse) GetConsolidationFunc() string {
	if m != nil {
		return m.ConsolidationFunc
	}
	return ""
}

func (m *FetchResponse) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *FetchResponse) GetStopTime() int64 {
	if m != nil {
		return m.StopTime
	}
	return 0
}

func (m *FetchResponse) GetStepTime() int64 {
	if m != nil {
		return m.StepTime
	}
	return 0
}

func (m *FetchResponse) GetXFilesFactor() float32 {
	if m != nil {
		return m.XFilesFactor
	}
	return 0
}

func (m *FetchResponse) GetHighPrecisionTimestamps() bool {
	if m != nil {
		return m.HighPrecisionTimestamps
	}
	return false
}

func (m *FetchResponse) GetValues() []float64 {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *FetchResponse) GetAppliedFunctions() []string {
	if m != nil {
		return m.AppliedFunctions
	}
	return nil
}

func (m *FetchResponse) GetRequestStartTime() int64 {
	if m != nil {
		return m.RequestStartTime
	}
	return 0
}

func (m *FetchResponse) GetRequestStopTime() int64 {
	if m != nil {
		return m.RequestStopTime
	}
	return 0
}

type MultiFetchResponse struct {
	Metrics []FetchResponse `protobuf:"bytes,1,rep,name=metrics" json:"metrics"`
}

func (m *MultiFetchResponse) Reset()      { *m = MultiFetchResponse{} }
func (*MultiFetchResponse) ProtoMessage() {}
func (*MultiFetchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{6}
}
func (m *MultiFetchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiFetchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiFetchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MultiFetchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiFetchResponse.Merge(dst, src)
}
func (m *MultiFetchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MultiFetchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiFetchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MultiFetchResponse proto.InternalMessageInfo

func (m *MultiFetchResponse) GetMetrics() []FetchResponse {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// Find Metrics
type MultiGlobRequest struct {
	Metrics   []string `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty"`
	StartTime int64    `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	StopTime  int64    `protobuf:"varint,3,opt,name=stopTime,proto3" json:"stopTime,omitempty"`
}

func (m *MultiGlobRequest) Reset()      { *m = MultiGlobRequest{} }
func (*MultiGlobRequest) ProtoMessage() {}
func (*MultiGlobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{7}
}
func (m *MultiGlobRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiGlobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiGlobRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MultiGlobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiGlobRequest.Merge(dst, src)
}
func (m *MultiGlobRequest) XXX_Size() int {
	return m.Size()
}
func (m *MultiGlobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiGlobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MultiGlobRequest proto.InternalMessageInfo

func (m *MultiGlobRequest) GetMetrics() []string {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *MultiGlobRequest) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *MultiGlobRequest) GetStopTime() int64 {
	if m != nil {
		return m.StopTime
	}
	return 0
}

type GlobMatch struct {
	Path   string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	IsLeaf bool   `protobuf:"varint,2,opt,name=isLeaf,proto3" json:"isLeaf,omitempty"`
}

func (m *GlobMatch) Reset()      { *m = GlobMatch{} }
func (*GlobMatch) ProtoMessage() {}
func (*GlobMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{8}
}
func (m *GlobMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GlobMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobMatch.Merge(dst, src)
}
func (m *GlobMatch) XXX_Size() int {
	return m.Size()
}
func (m *GlobMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobMatch.DiscardUnknown(m)
}

var xxx_messageInfo_GlobMatch proto.InternalMessageInfo

func (m *GlobMatch) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GlobMatch) GetIsLeaf() bool {
	if m != nil {
		return m.IsLeaf
	}
	return false
}

// request name to metrics
type GlobResponse struct {
	Name    string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Matches []GlobMatch `protobuf:"bytes,2,rep,name=matches" json:"matches"`
}

func (m *GlobResponse) Reset()      { *m = GlobResponse{} }
func (*GlobResponse) ProtoMessage() {}
func (*GlobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{9}
}
func (m *GlobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GlobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobResponse.Merge(dst, src)
}
func (m *GlobResponse) XXX_Size() int {
	return m.Size()
}
func (m *GlobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GlobResponse proto.InternalMessageInfo

func (m *GlobResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GlobResponse) GetMatches() []GlobMatch {
	if m != nil {
		return m.Matches
	}
	return nil
}

type MultiGlobResponse struct {
	Metrics []GlobResponse `protobuf:"bytes,1,rep,name=metrics" json:"metrics"`
}

func (m *MultiGlobResponse) Reset()      { *m = MultiGlobResponse{} }
func (*MultiGlobResponse) ProtoMessage() {}
func (*MultiGlobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{10}
}
func (m *MultiGlobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiGlobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiGlobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MultiGlobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiGlobResponse.Merge(dst, src)
}
func (m *MultiGlobResponse) XXX_Size() int {
	return m.Size()
}
func (m *MultiGlobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiGlobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MultiGlobResponse proto.InternalMessageInfo

func (m *MultiGlobResponse) GetMetrics() []GlobResponse {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// Information about metrics
type MetricsInfoRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *MetricsInfoRequest) Reset()      { *m = MetricsInfoRequest{} }
func (*MetricsInfoRequest) ProtoMessage() {}
func (*MetricsInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{11}
}
func (m *MetricsInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MetricsInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsInfoRequest.Merge(dst, src)
}
func (m *MetricsInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *MetricsInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsInfoRequest proto.InternalMessageInfo

func (m *MetricsInfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MultiMetricsInfoRequest struct {
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
}

func (m *MultiMetricsInfoRequest) Reset()      { *m = MultiMetricsInfoRequest{} }
func (*MultiMetricsInfoRequest) ProtoMessage() {}
func (*MultiMetricsInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{12}
}
func (m *MultiMetricsInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMetricsInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMetricsInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MultiMetricsInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMetricsInfoRequest.Merge(dst, src)
}
func (m *MultiMetricsInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *MultiMetricsInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMetricsInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMetricsInfoRequest proto.InternalMessageInfo

func (m *MultiMetricsInfoRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type Retention struct {
	SecondsPerPoint int64 `protobuf:"varint,1,opt,name=secondsPerPoint,proto3" json:"secondsPerPoint,omitempty"`
	NumberOfPoints  int64 `protobuf:"varint,2,opt,name=numberOfPoints,proto3" json:"numberOfPoints,omitempty"`
}

func (m *Retention) Reset()      { *m = Retention{} }
func (*Retention) ProtoMessage() {}
func (*Retention) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{13}
}
func (m *Retention) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Retention) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Retention.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Retention) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Retention.Merge(dst, src)
}
func (m *Retention) XXX_Size() int {
	return m.Size()
}
func (m *Retention) XXX_DiscardUnknown() {
	xxx_messageInfo_Retention.DiscardUnknown(m)
}

var xxx_messageInfo_Retention proto.InternalMessageInfo

func (m *Retention) GetSecondsPerPoint() int64 {
	if m != nil {
		return m.SecondsPerPoint
	}
	return 0
}

func (m *Retention) GetNumberOfPoints() int64 {
	if m != nil {
		return m.NumberOfPoints
	}
	return 0
}

type MetricsInfoResponse struct {
	Name              string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ConsolidationFunc string      `protobuf:"bytes,2,opt,name=consolidationFunc,proto3" json:"consolidationFunc,omitempty"`
	XFilesFactor      float32     `protobuf:"fixed32,4,opt,name=xFilesFactor,proto3" json:"xFilesFactor,omitempty"`
	MaxRetention      int64       `protobuf:"varint,3,opt,name=maxRetention,proto3" json:"maxRetention,omitempty"`
	Retentions        []Retention `protobuf:"bytes,5,rep,name=retentions" json:"retentions"`
}

func (m *MetricsInfoResponse) Reset()      { *m = MetricsInfoResponse{} }
func (*MetricsInfoResponse) ProtoMessage() {}
func (*MetricsInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{14}
}
func (m *MetricsInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MetricsInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsInfoResponse.Merge(dst, src)
}
func (m *MetricsInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MetricsInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsInfoResponse proto.InternalMessageInfo

func (m *MetricsInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricsInfoResponse) GetConsolidationFunc() string {
	if m != nil {
		return m.ConsolidationFunc
	}
	return ""
}

func (m *MetricsInfoResponse) GetXFilesFactor() float32 {
	if m != nil {
		return m.XFilesFactor
	}
	return 0
}

func (m *MetricsInfoResponse) GetMaxRetention() int64 {
	if m != nil {
		return m.MaxRetention
	}
	return 0
}

func (m *MetricsInfoResponse) GetRetentions() []Retention {
	if m != nil {
		return m.Retentions
	}
	return nil
}

type MultiMetricsInfoResponse struct {
	Metrics []MetricsInfoResponse `protobuf:"bytes,1,rep,name=metrics" json:"metrics"`
}

func (m *MultiMetricsInfoResponse) Reset()      { *m = MultiMetricsInfoResponse{} }
func (*MultiMetricsInfoResponse) ProtoMessage() {}
func (*MultiMetricsInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{15}
}
func (m *MultiMetricsInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiMetricsInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiMetricsInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MultiMetricsInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMetricsInfoResponse.Merge(dst, src)
}
func (m *MultiMetricsInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MultiMetricsInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMetricsInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMetricsInfoResponse proto.InternalMessageInfo

func (m *MultiMetricsInfoResponse) GetMetrics() []MetricsInfoResponse {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// key = server, value = metric
type ZipperInfoResponse struct {
	Info map[string]MultiMetricsInfoResponse `protobuf:"bytes,1,rep,name=info" json:"info" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ZipperInfoResponse) Reset()      { *m = ZipperInfoResponse{} }
func (*ZipperInfoResponse) ProtoMessage() {}
func (*ZipperInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{16}
}
func (m *ZipperInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZipperInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZipperInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ZipperInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZipperInfoResponse.Merge(dst, src)
}
func (m *ZipperInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ZipperInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ZipperInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ZipperInfoResponse proto.InternalMessageInfo

func (m *ZipperInfoResponse) GetInfo() map[string]MultiMetricsInfoResponse {
	if m != nil {
		return m.Info
	}
	return nil
}

// List all metrics
type ListMetricsResponse struct {
	Metrics []string `protobuf:"bytes,1,rep,name=Metrics" json:"Metrics,omitempty"`
}

func (m *ListMetricsResponse) Reset()      { *m = ListMetricsResponse{} }
func (*ListMetricsResponse) ProtoMessage() {}
func (*ListMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{17}
}
func (m *ListMetricsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMetricsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMetricsResponse.Merge(dst, src)
}
func (m *ListMetricsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMetricsResponse proto.InternalMessageInfo

func (m *ListMetricsResponse) GetMetrics() []string {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// Get stats about metrics
type MetricDetails struct {
	Size_    int64 `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`
	ModTime  int64 `protobuf:"varint,3,opt,name=ModTime,proto3" json:"ModTime,omitempty"`
	ATime    int64 `protobuf:"varint,4,opt,name=ATime,proto3" json:"ATime,omitempty"`
	RdTime   int64 `protobuf:"varint,5,opt,name=RdTime,proto3" json:"RdTime,omitempty"`
	RealSize int64 `protobuf:"varint,6,opt,name=RealSize,proto3" json:"RealSize,omitempty"`
}

func (m *MetricDetails) Reset()      { *m = MetricDetails{} }
func (*MetricDetails) ProtoMessage() {}
func (*MetricDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{18}
}
func (m *MetricDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MetricDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDetails.Merge(dst, src)
}
func (m *MetricDetails) XXX_Size() int {
	return m.Size()
}
func (m *MetricDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDetails.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDetails proto.InternalMessageInfo

func (m *MetricDetails) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *MetricDetails) GetModTime() int64 {
	if m != nil {
		return m.ModTime
	}
	return 0
}

func (m *MetricDetails) GetATime() int64 {
	if m != nil {
		return m.ATime
	}
	return 0
}

func (m *MetricDetails) GetRdTime() int64 {
	if m != nil {
		return m.RdTime
	}
	return 0
}

func (m *MetricDetails) GetRealSize() int64 {
	if m != nil {
		return m.RealSize
	}
	return 0
}

type MetricDetailsResponse struct {
	Metrics    map[string]*MetricDetails `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	FreeSpace  uint64                    `protobuf:"varint,2,opt,name=FreeSpace,proto3" json:"FreeSpace,omitempty"`
	TotalSpace uint64                    `protobuf:"varint,3,opt,name=TotalSpace,proto3" json:"TotalSpace,omitempty"`
}

func (m *MetricDetailsResponse) Reset()      { *m = MetricDetailsResponse{} }
func (*MetricDetailsResponse) ProtoMessage() {}
func (*MetricDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{19}
}
func (m *MetricDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MetricDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDetailsResponse.Merge(dst, src)
}
func (m *MetricDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MetricDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDetailsResponse proto.InternalMessageInfo

func (m *MetricDetailsResponse) GetMetrics() map[string]*MetricDetails {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *MetricDetailsResponse) GetFreeSpace() uint64 {
	if m != nil {
		return m.FreeSpace
	}
	return 0
}

func (m *MetricDetailsResponse) GetTotalSpace() uint64 {
	if m != nil {
		return m.TotalSpace
	}
	return 0
}

type MultiDetailsResponse struct {
	Metrics map[string]*MetricDetailsResponse `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MultiDetailsResponse) Reset()      { *m = MultiDetailsResponse{} }
func (*MultiDetailsResponse) ProtoMessage() {}
func (*MultiDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f, []int{20}
}
func (m *MultiDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MultiDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiDetailsResponse.Merge(dst, src)
}
func (m *MultiDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MultiDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MultiDetailsResponse proto.InternalMessageInfo

func (m *MultiDetailsResponse) GetMetrics() map[string]*MetricDetailsResponse {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func init() {
	proto.RegisterType((*FilteringFunction)(nil), "carbonapi_v3_pb.FilteringFunction")
	proto.RegisterType((*CapabilityRequest)(nil), "carbonapi_v3_pb.CapabilityRequest")
	proto.RegisterType((*CapabilityResponse)(nil), "carbonapi_v3_pb.CapabilityResponse")
	proto.RegisterType((*FetchRequest)(nil), "carbonapi_v3_pb.FetchRequest")
	proto.RegisterType((*MultiFetchRequest)(nil), "carbonapi_v3_pb.MultiFetchRequest")
	proto.RegisterType((*FetchResponse)(nil), "carbonapi_v3_pb.FetchResponse")
	proto.RegisterType((*MultiFetchResponse)(nil), "carbonapi_v3_pb.MultiFetchResponse")
	proto.RegisterType((*MultiGlobRequest)(nil), "carbonapi_v3_pb.MultiGlobRequest")
	proto.RegisterType((*GlobMatch)(nil), "carbonapi_v3_pb.GlobMatch")
	proto.RegisterType((*GlobResponse)(nil), "carbonapi_v3_pb.GlobResponse")
	proto.RegisterType((*MultiGlobResponse)(nil), "carbonapi_v3_pb.MultiGlobResponse")
	proto.RegisterType((*MetricsInfoRequest)(nil), "carbonapi_v3_pb.MetricsInfoRequest")
	proto.RegisterType((*MultiMetricsInfoRequest)(nil), "carbonapi_v3_pb.MultiMetricsInfoRequest")
	proto.RegisterType((*Retention)(nil), "carbonapi_v3_pb.Retention")
	proto.RegisterType((*MetricsInfoResponse)(nil), "carbonapi_v3_pb.MetricsInfoResponse")
	proto.RegisterType((*MultiMetricsInfoResponse)(nil), "carbonapi_v3_pb.MultiMetricsInfoResponse")
	proto.RegisterType((*ZipperInfoResponse)(nil), "carbonapi_v3_pb.ZipperInfoResponse")
	proto.RegisterMapType((map[string]MultiMetricsInfoResponse)(nil), "carbonapi_v3_pb.ZipperInfoResponse.InfoEntry")
	proto.RegisterType((*ListMetricsResponse)(nil), "carbonapi_v3_pb.ListMetricsResponse")
	proto.RegisterType((*MetricDetails)(nil), "carbonapi_v3_pb.MetricDetails")
	proto.RegisterType((*MetricDetailsResponse)(nil), "carbonapi_v3_pb.MetricDetailsResponse")
	proto.RegisterMapType((map[string]*MetricDetails)(nil), "carbonapi_v3_pb.MetricDetailsResponse.MetricsEntry")
	proto.RegisterType((*MultiDetailsResponse)(nil), "carbonapi_v3_pb.MultiDetailsResponse")
	proto.RegisterMapType((map[string]*MetricDetailsResponse)(nil), "carbonapi_v3_pb.MultiDetailsResponse.MetricsEntry")
}
func (this *FilteringFunction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilteringFunction)
	if !ok {
		that2, ok := that.(FilteringFunction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Arguments) != len(that1.Arguments) {
		return false
	}
	for i := range this.Arguments {
		if this.Arguments[i] != that1.Arguments[i] {
			return false
		}
	}
	return true
}
func (this *CapabilityRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CapabilityRequest)
	if !ok {
		that2, ok := that.(CapabilityRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CapabilityResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CapabilityResponse)
	if !ok {
		that2, ok := that.(CapabilityResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SupportedProtocols) != len(that1.SupportedProtocols) {
		return false
	}
	for i := range this.SupportedProtocols {
		if this.SupportedProtocols[i] != that1.SupportedProtocols[i] {
			return false
		}
	}
	if this.Name != that1.Name {
		return false
	}
	if this.HighPrecisionTimestamps != that1.HighPrecisionTimestamps {
		return false
	}
	if this.SupportFilteringFunctions != that1.SupportFilteringFunctions {
		return false
	}
	if this.LikeSplittedRequests != that1.LikeSplittedRequests {
		return false
	}
	if this.SupportStreaming != that1.SupportStreaming {
		return false
	}
	return true
}
func (this *FetchRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FetchRequest)
	if !ok {
		that2, ok := that.(FetchRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.StopTime != that1.StopTime {
		return false
	}
	if this.HighPrecisionTimestamps != that1.HighPrecisionTimestamps {
		return false
	}
	if this.PathExpression != that1.PathExpression {
		return false
	}
	if len(this.FilterFunctions) != len(that1.FilterFunctions) {
		return false
	}
	for i := range this.FilterFunctions {
		if !this.FilterFunctions[i].Equal(that1.FilterFunctions[i]) {
			return false
		}
	}
	if this.MaxDataPoints != that1.MaxDataPoints {
		return false
	}
	return true
}
func (this *MultiFetchRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MultiFetchRequest)
	if !ok {
		that2, ok := that.(MultiFetchRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if !this.Metrics[i].Equal(&that1.Metrics[i]) {
			return false
		}
	}
	return true
}
func (this *FetchResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FetchResponse)
	if !ok {
		that2, ok := that.(FetchResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.PathExpression != that1.PathExpression {
		return false
	}
	if this.ConsolidationFunc != that1.ConsolidationFunc {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.StopTime != that1.StopTime {
		return false
	}
	if this.StepTime != that1.StepTime {
		return false
	}
	if this.XFilesFactor != that1.XFilesFactor {
		return false
	}
	if this.HighPrecisionTimestamps != that1.HighPrecisionTimestamps {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	if len(this.AppliedFunctions) != len(that1.AppliedFunctions) {
		return false
	}
	for i := range this.AppliedFunctions {
		if this.AppliedFunctions[i] != that1.AppliedFunctions[i] {
			return false
		}
	}
	if this.RequestStartTime != that1.RequestStartTime {
		return false
	}
	if this.RequestStopTime != that1.RequestStopTime {
		return false
	}
	return true
}
func (this *MultiFetchResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MultiFetchResponse)
	if !ok {
		that2, ok := that.(MultiFetchResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if !this.Metrics[i].Equal(&that1.Metrics[i]) {
			return false
		}
	}
	return true
}
func (this *MultiGlobRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MultiGlobRequest)
	if !ok {
		that2, ok := that.(MultiGlobRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if this.Metrics[i] != that1.Metrics[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.StopTime != that1.StopTime {
		return false
	}
	return true
}
func (this *GlobMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobMatch)
	if !ok {
		that2, ok := that.(GlobMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.IsLeaf != that1.IsLeaf {
		return false
	}
	return true
}
func (this *GlobResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobResponse)
	if !ok {
		that2, ok := that.(GlobResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Matches) != len(that1.Matches) {
		return false
	}
	for i := range this.Matches {
		if !this.Matches[i].Equal(&that1.Matches[i]) {
			return false
		}
	}
	return true
}
func (this *MultiGlobResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MultiGlobResponse)
	if !ok {
		that2, ok := that.(MultiGlobResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if !this.Metrics[i].Equal(&that1.Metrics[i]) {
			return false
		}
	}
	return true
}
func (this *MetricsInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricsInfoRequest)
	if !ok {
		that2, ok := that.(MetricsInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *MultiMetricsInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MultiMetricsInfoRequest)
	if !ok {
		that2, ok := that.(MultiMetricsInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Names) != len(that1.Names) {
		return false
	}
	for i := range this.Names {
		if this.Names[i] != that1.Names[i] {
			return false
		}
	}
	return true
}
func (this *Retention) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Retention)
	if !ok {
		that2, ok := that.(Retention)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SecondsPerPoint != that1.SecondsPerPoint {
		return false
	}
	if this.NumberOfPoints != that1.NumberOfPoints {
		return false
	}
	return true
}
func (this *MetricsInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricsInfoResponse)
	if !ok {
		that2, ok := that.(MetricsInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ConsolidationFunc != that1.ConsolidationFunc {
		return false
	}
	if this.XFilesFactor != that1.XFilesFactor {
		return false
	}
	if this.MaxRetention != that1.MaxRetention {
		return false
	}
	if len(this.Retentions) != len(that1.Retentions) {
		return false
	}
	for i := range this.Retentions {
		if !this.Retentions[i].Equal(&that1.Retentions[i]) {
			return false
		}
	}
	return true
}
func (this *MultiMetricsInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MultiMetricsInfoResponse)
	if !ok {
		that2, ok := that.(MultiMetricsInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if !this.Metrics[i].Equal(&that1.Metrics[i]) {
			return false
		}
	}
	return true
}
func (this *ZipperInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ZipperInfoResponse)
	if !ok {
		that2, ok := that.(ZipperInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Info) != len(that1.Info) {
		return false
	}
	for i := range this.Info {
		a := this.Info[i]
		b := that1.Info[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *ListMetricsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListMetricsResponse)
	if !ok {
		that2, ok := that.(ListMetricsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if this.Metrics[i] != that1.Metrics[i] {
			return false
		}
	}
	return true
}
func (this *MetricDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricDetails)
	if !ok {
		that2, ok := that.(MetricDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Size_ != that1.Size_ {
		return false
	}
	if this.ModTime != that1.ModTime {
		return false
	}
	if this.ATime != that1.ATime {
		return false
	}
	if this.RdTime != that1.RdTime {
		return false
	}
	if this.RealSize != that1.RealSize {
		return false
	}
	return true
}
func (this *MetricDetailsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricDetailsResponse)
	if !ok {
		that2, ok := that.(MetricDetailsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if !this.Metrics[i].Equal(that1.Metrics[i]) {
			return false
		}
	}
	if this.FreeSpace != that1.FreeSpace {
		return false
	}
	if this.TotalSpace != that1.TotalSpace {
		return false
	}
	return true
}
func (this *MultiDetailsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MultiDetailsResponse)
	if !ok {
		that2, ok := that.(MultiDetailsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if !this.Metrics[i].Equal(that1.Metrics[i]) {
			return false
		}
	}
	return true
}
func (this *FilteringFunction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&carbonapi_v3_pb.FilteringFunction{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Arguments: "+fmt.Sprintf("%#v", this.Arguments)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CapabilityRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&carbonapi_v3_pb.CapabilityRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CapabilityResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&carbonapi_v3_pb.CapabilityResponse{")
	s = append(s, "SupportedProtocols: "+fmt.Sprintf("%#v", this.SupportedProtocols)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "HighPrecisionTimestamps: "+fmt.Sprintf("%#v", this.HighPrecisionTimestamps)+",\n")
	s = append(s, "SupportFilteringFunctions: "+fmt.Sprintf("%#v", this.SupportFilteringFunctions)+",\n")
	s = append(s, "LikeSplittedRequests: "+fmt.Sprintf("%#v", this.LikeSplittedRequests)+",\n")
	s = append(s, "SupportStreaming: "+fmt.Sprintf("%#v", this.SupportStreaming)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FetchRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&carbonapi_v3_pb.FetchRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "StopTime: "+fmt.Sprintf("%#v", this.StopTime)+",\n")
	s = append(s, "HighPrecisionTimestamps: "+fmt.Sprintf("%#v", this.HighPrecisionTimestamps)+",\n")
	s = append(s, "PathExpression: "+fmt.Sprintf("%#v", this.PathExpression)+",\n")
	if this.FilterFunctions != nil {
		s = append(s, "FilterFunctions: "+fmt.Sprintf("%#v", this.FilterFunctions)+",\n")
	}
	s = append(s, "MaxDataPoints: "+fmt.Sprintf("%#v", this.MaxDataPoints)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MultiFetchRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&carbonapi_v3_pb.MultiFetchRequest{")
	if this.Metrics != nil {
		vs := make([]*FetchRequest, len(this.Metrics))
		for i := range vs {
			vs[i] = &this.Metrics[i]
		}
		s = append(s, "Metrics: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FetchResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&carbonapi_v3_pb.FetchResponse{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "PathExpression: "+fmt.Sprintf("%#v", this.PathExpression)+",\n")
	s = append(s, "ConsolidationFunc: "+fmt.Sprintf("%#v", this.ConsolidationFunc)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "StopTime: "+fmt.Sprintf("%#v", this.StopTime)+",\n")
	s = append(s, "StepTime: "+fmt.Sprintf("%#v", this.StepTime)+",\n")
	s = append(s, "XFilesFactor: "+fmt.Sprintf("%#v", this.XFilesFactor)+",\n")
	s = append(s, "HighPrecisionTimestamps: "+fmt.Sprintf("%#v", this.HighPrecisionTimestamps)+",\n")
	s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	s = append(s, "AppliedFunctions: "+fmt.Sprintf("%#v", this.AppliedFunctions)+",\n")
	s = append(s, "RequestStartTime: "+fmt.Sprintf("%#v", this.RequestStartTime)+",\n")
	s = append(s, "RequestStopTime: "+fmt.Sprintf("%#v", this.RequestStopTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MultiFetchResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&carbonapi_v3_pb.MultiFetchResponse{")
	if this.Metrics != nil {
		vs := make([]*FetchResponse, len(this.Metrics))
		for i := range vs {
			vs[i] = &this.Metrics[i]
		}
		s = append(s, "Metrics: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MultiGlobRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&carbonapi_v3_pb.MultiGlobRequest{")
	s = append(s, "Metrics: "+fmt.Sprintf("%#v", this.Metrics)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "StopTime: "+fmt.Sprintf("%#v", this.StopTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobMatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&carbonapi_v3_pb.GlobMatch{")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "IsLeaf: "+fmt.Sprintf("%#v", this.IsLeaf)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&carbonapi_v3_pb.GlobResponse{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Matches != nil {
		vs := make([]*GlobMatch, len(this.Matches))
		for i := range vs {
			vs[i] = &this.Matches[i]
		}
		s = append(s, "Matches: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MultiGlobResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&carbonapi_v3_pb.MultiGlobResponse{")
	if this.Metrics != nil {
		vs := make([]*GlobResponse, len(this.Metrics))
		for i := range vs {
			vs[i] = &this.Metrics[i]
		}
		s = append(s, "Metrics: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetricsInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&carbonapi_v3_pb.MetricsInfoRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MultiMetricsInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&carbonapi_v3_pb.MultiMetricsInfoRequest{")
	s = append(s, "Names: "+fmt.Sprintf("%#v", this.Names)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Retention) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&carbonapi_v3_pb.Retention{")
	s = append(s, "SecondsPerPoint: "+fmt.Sprintf("%#v", this.SecondsPerPoint)+",\n")
	s = append(s, "NumberOfPoints: "+fmt.Sprintf("%#v", this.NumberOfPoints)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetricsInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&carbonapi_v3_pb.MetricsInfoResponse{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ConsolidationFunc: "+fmt.Sprintf("%#v", this.ConsolidationFunc)+",\n")
	s = append(s, "XFilesFactor: "+fmt.Sprintf("%#v", this.XFilesFactor)+",\n")
	s = append(s, "MaxRetention: "+fmt.Sprintf("%#v", this.MaxRetention)+",\n")
	if this.Retentions != nil {
		vs := make([]*Retention, len(this.Retentions))
		for i := range vs {
			vs[i] = &this.Retentions[i]
		}
		s = append(s, "Retentions: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MultiMetricsInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&carbonapi_v3_pb.MultiMetricsInfoResponse{")
	if this.Metrics != nil {
		vs := make([]*MetricsInfoResponse, len(this.Metrics))
		for i := range vs {
			vs[i] = &this.Metrics[i]
		}
		s = append(s, "Metrics: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ZipperInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&carbonapi_v3_pb.ZipperInfoResponse{")
	keysForInfo := make([]string, 0, len(this.Info))
	for k, _ := range this.Info {
		keysForInfo = append(keysForInfo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForInfo)
	mapStringForInfo := "map[string]MultiMetricsInfoResponse{"
	for _, k := range keysForInfo {
		mapStringForInfo += fmt.Sprintf("%#v: %#v,", k, this.Info[k])
	}
	mapStringForInfo += "}"
	if this.Info != nil {
		s = append(s, "Info: "+mapStringForInfo+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListMetricsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&carbonapi_v3_pb.ListMetricsResponse{")
	s = append(s, "Metrics: "+fmt.Sprintf("%#v", this.Metrics)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetricDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&carbonapi_v3_pb.MetricDetails{")
	s = append(s, "Size_: "+fmt.Sprintf("%#v", this.Size_)+",\n")
	s = append(s, "ModTime: "+fmt.Sprintf("%#v", this.ModTime)+",\n")
	s = append(s, "ATime: "+fmt.Sprintf("%#v", this.ATime)+",\n")
	s = append(s, "RdTime: "+fmt.Sprintf("%#v", this.RdTime)+",\n")
	s = append(s, "RealSize: "+fmt.Sprintf("%#v", this.RealSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetricDetailsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&carbonapi_v3_pb.MetricDetailsResponse{")
	keysForMetrics := make([]string, 0, len(this.Metrics))
	for k, _ := range this.Metrics {
		keysForMetrics = append(keysForMetrics, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetrics)
	mapStringForMetrics := "map[string]*MetricDetails{"
	for _, k := range keysForMetrics {
		mapStringForMetrics += fmt.Sprintf("%#v: %#v,", k, this.Metrics[k])
	}
	mapStringForMetrics += "}"
	if this.Metrics != nil {
		s = append(s, "Metrics: "+mapStringForMetrics+",\n")
	}
	s = append(s, "FreeSpace: "+fmt.Sprintf("%#v", this.FreeSpace)+",\n")
	s = append(s, "TotalSpace: "+fmt.Sprintf("%#v", this.TotalSpace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MultiDetailsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&carbonapi_v3_pb.MultiDetailsResponse{")
	keysForMetrics := make([]string, 0, len(this.Metrics))
	for k, _ := range this.Metrics {
		keysForMetrics = append(keysForMetrics, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetrics)
	mapStringForMetrics := "map[string]*MetricDetailsResponse{"
	for _, k := range keysForMetrics {
		mapStringForMetrics += fmt.Sprintf("%#v: %#v,", k, this.Metrics[k])
	}
	mapStringForMetrics += "}"
	if this.Metrics != nil {
		s = append(s, "Metrics: "+mapStringForMetrics+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCarbonapiV3Pb(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FilteringFunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilteringFunction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Arguments) > 0 {
		for _, s := range m.Arguments {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CapabilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapabilityRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CapabilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapabilityResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SupportedProtocols) > 0 {
		for _, s := range m.SupportedProtocols {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.HighPrecisionTimestamps {
		dAtA[i] = 0x18
		i++
		if m.HighPrecisionTimestamps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SupportFilteringFunctions {
		dAtA[i] = 0x20
		i++
		if m.SupportFilteringFunctions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LikeSplittedRequests {
		dAtA[i] = 0x28
		i++
		if m.LikeSplittedRequests {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SupportStreaming {
		dAtA[i] = 0x30
		i++
		if m.SupportStreaming {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *FetchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.StartTime))
	}
	if m.StopTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.StopTime))
	}
	if m.HighPrecisionTimestamps {
		dAtA[i] = 0x20
		i++
		if m.HighPrecisionTimestamps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.PathExpression) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(len(m.PathExpression)))
		i += copy(dAtA[i:], m.PathExpression)
	}
	if len(m.FilterFunctions) > 0 {
		for _, msg := range m.FilterFunctions {
			dAtA[i] = 0x32
			i++
			i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MaxDataPoints != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.MaxDataPoints))
	}
	return i, nil
}

func (m *MultiFetchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiFetchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, msg := range m.Metrics {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FetchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.PathExpression) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(len(m.PathExpression)))
		i += copy(dAtA[i:], m.PathExpression)
	}
	if len(m.ConsolidationFunc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(len(m.ConsolidationFunc)))
		i += copy(dAtA[i:], m.ConsolidationFunc)
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.StartTime))
	}
	if m.StopTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.StopTime))
	}
	if m.StepTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.StepTime))
	}
	if m.XFilesFactor != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.XFilesFactor))))
		i += 4
	}
	if m.HighPrecisionTimestamps {
		dAtA[i] = 0x40
		i++
		if m.HighPrecisionTimestamps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Values) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(len(m.Values)*8))
		for _, num := range m.Values {
			f1 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f1))
			i += 8
		}
	}
	if len(m.AppliedFunctions) > 0 {
		for _, s := range m.AppliedFunctions {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.RequestStartTime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.RequestStartTime))
	}
	if m.RequestStopTime != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.RequestStopTime))
	}
	return i, nil
}

func (m *MultiFetchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiFetchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, msg := range m.Metrics {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MultiGlobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiGlobRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, s := range m.Metrics {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.StartTime))
	}
	if m.StopTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.StopTime))
	}
	return i, nil
}

func (m *GlobMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobMatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.IsLeaf {
		dAtA[i] = 0x10
		i++
		if m.IsLeaf {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GlobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Matches) > 0 {
		for _, msg := range m.Matches {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MultiGlobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiGlobResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, msg := range m.Metrics {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MetricsInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *MultiMetricsInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMetricsInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Retention) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Retention) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SecondsPerPoint != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.SecondsPerPoint))
	}
	if m.NumberOfPoints != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.NumberOfPoints))
	}
	return i, nil
}

func (m *MetricsInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.ConsolidationFunc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(len(m.ConsolidationFunc)))
		i += copy(dAtA[i:], m.ConsolidationFunc)
	}
	if m.MaxRetention != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.MaxRetention))
	}
	if m.XFilesFactor != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.XFilesFactor))))
		i += 4
	}
	if len(m.Retentions) > 0 {
		for _, msg := range m.Retentions {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MultiMetricsInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMetricsInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, msg := range m.Metrics {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ZipperInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZipperInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for k, _ := range m.Info {
			dAtA[i] = 0xa
			i++
			v := m.Info[k]
			msgSize := 0
			if (&v) != nil {
				msgSize = (&v).Size()
				msgSize += 1 + sovCarbonapiV3Pb(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovCarbonapiV3Pb(uint64(len(k))) + msgSize
			i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64((&v).Size()))
			n2, err := (&v).MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n2
		}
	}
	return i, nil
}

func (m *ListMetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, s := range m.Metrics {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *MetricDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricDetails) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.Size_))
	}
	if m.ModTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.ModTime))
	}
	if m.ATime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.ATime))
	}
	if m.RdTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.RdTime))
	}
	if m.RealSize != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.RealSize))
	}
	return i, nil
}

func (m *MetricDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for k, _ := range m.Metrics {
			dAtA[i] = 0xa
			i++
			v := m.Metrics[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovCarbonapiV3Pb(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovCarbonapiV3Pb(uint64(len(k))) + msgSize
			i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	if m.FreeSpace != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.FreeSpace))
	}
	if m.TotalSpace != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(m.TotalSpace))
	}
	return i, nil
}

func (m *MultiDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for k, _ := range m.Metrics {
			dAtA[i] = 0xa
			i++
			v := m.Metrics[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovCarbonapiV3Pb(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovCarbonapiV3Pb(uint64(len(k))) + msgSize
			i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintCarbonapiV3Pb(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	return i, nil
}

func encodeVarintCarbonapiV3Pb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FilteringFunction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCarbonapiV3Pb(uint64(l))
	}
	if len(m.Arguments) > 0 {
		for _, s := range m.Arguments {
			l = len(s)
			n += 1 + l + sovCarbonapiV3Pb(uint64(l))
		}
	}
	return n
}

func (m *CapabilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CapabilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SupportedProtocols) > 0 {
		for _, s := range m.SupportedProtocols {
			l = len(s)
			n += 1 + l + sovCarbonapiV3Pb(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCarbonapiV3Pb(uint64(l))
	}
	if m.HighPrecisionTimestamps {
		n += 2
	}
	if m.SupportFilteringFunctions {
		n += 2
	}
	if m.LikeSplittedRequests {
		n += 2
	}
	if m.SupportStreaming {
		n += 2
	}
	return n
}

func (m *FetchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCarbonapiV3Pb(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.StartTime))
	}
	if m.StopTime != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.StopTime))
	}
	if m.HighPrecisionTimestamps {
		n += 2
	}
	l = len(m.PathExpression)
	if l > 0 {
		n += 1 + l + sovCarbonapiV3Pb(uint64(l))
	}
	if len(m.FilterFunctions) > 0 {
		for _, e := range m.FilterFunctions {
			l = e.Size()
			n += 1 + l + sovCarbonapiV3Pb(uint64(l))
		}
	}
	if m.MaxDataPoints != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.MaxDataPoints))
	}
	return n
}

func (m *MultiFetchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovCarbonapiV3Pb(uint64(l))
		}
	}
	return n
}

func (m *FetchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCarbonapiV3Pb(uint64(l))
	}
	l = len(m.PathExpression)
	if l > 0 {
		n += 1 + l + sovCarbonapiV3Pb(uint64(l))
	}
	l = len(m.ConsolidationFunc)
	if l > 0 {
		n += 1 + l + sovCarbonapiV3Pb(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.StartTime))
	}
	if m.StopTime != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.StopTime))
	}
	if m.StepTime != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.StepTime))
	}
	if m.XFilesFactor != 0 {
		n += 5
	}
	if m.HighPrecisionTimestamps {
		n += 2
	}
	if len(m.Values) > 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(len(m.Values)*8)) + len(m.Values)*8
	}
	if len(m.AppliedFunctions) > 0 {
		for _, s := range m.AppliedFunctions {
			l = len(s)
			n += 1 + l + sovCarbonapiV3Pb(uint64(l))
		}
	}
	if m.RequestStartTime != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.RequestStartTime))
	}
	if m.RequestStopTime != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.RequestStopTime))
	}
	return n
}

func (m *MultiFetchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovCarbonapiV3Pb(uint64(l))
		}
	}
	return n
}

func (m *MultiGlobRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, s := range m.Metrics {
			l = len(s)
			n += 1 + l + sovCarbonapiV3Pb(uint64(l))
		}
	}
	if m.StartTime != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.StartTime))
	}
	if m.StopTime != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.StopTime))
	}
	return n
}

func (m *GlobMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovCarbonapiV3Pb(uint64(l))
	}
	if m.IsLeaf {
		n += 2
	}
	return n
}

func (m *GlobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCarbonapiV3Pb(uint64(l))
	}
	if len(m.Matches) > 0 {
		for _, e := range m.Matches {
			l = e.Size()
			n += 1 + l + sovCarbonapiV3Pb(uint64(l))
		}
	}
	return n
}

func (m *MultiGlobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovCarbonapiV3Pb(uint64(l))
		}
	}
	return n
}

func (m *MetricsInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCarbonapiV3Pb(uint64(l))
	}
	return n
}

func (m *MultiMetricsInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovCarbonapiV3Pb(uint64(l))
		}
	}
	return n
}

func (m *Retention) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SecondsPerPoint != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.SecondsPerPoint))
	}
	if m.NumberOfPoints != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.NumberOfPoints))
	}
	return n
}

func (m *MetricsInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCarbonapiV3Pb(uint64(l))
	}
	l = len(m.ConsolidationFunc)
	if l > 0 {
		n += 1 + l + sovCarbonapiV3Pb(uint64(l))
	}
	if m.MaxRetention != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.MaxRetention))
	}
	if m.XFilesFactor != 0 {
		n += 5
	}
	if len(m.Retentions) > 0 {
		for _, e := range m.Retentions {
			l = e.Size()
			n += 1 + l + sovCarbonapiV3Pb(uint64(l))
		}
	}
	return n
}

func (m *MultiMetricsInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovCarbonapiV3Pb(uint64(l))
		}
	}
	return n
}

func (m *ZipperInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for k, v := range m.Info {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovCarbonapiV3Pb(uint64(len(k))) + 1 + l + sovCarbonapiV3Pb(uint64(l))
			n += mapEntrySize + 1 + sovCarbonapiV3Pb(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ListMetricsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, s := range m.Metrics {
			l = len(s)
			n += 1 + l + sovCarbonapiV3Pb(uint64(l))
		}
	}
	return n
}

func (m *MetricDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Size_ != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.Size_))
	}
	if m.ModTime != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.ModTime))
	}
	if m.ATime != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.ATime))
	}
	if m.RdTime != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.RdTime))
	}
	if m.RealSize != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.RealSize))
	}
	return n
}

func (m *MetricDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for k, v := range m.Metrics {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCarbonapiV3Pb(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCarbonapiV3Pb(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCarbonapiV3Pb(uint64(mapEntrySize))
		}
	}
	if m.FreeSpace != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.FreeSpace))
	}
	if m.TotalSpace != 0 {
		n += 1 + sovCarbonapiV3Pb(uint64(m.TotalSpace))
	}
	return n
}

func (m *MultiDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for k, v := range m.Metrics {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCarbonapiV3Pb(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCarbonapiV3Pb(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCarbonapiV3Pb(uint64(mapEntrySize))
		}
	}
	return n
}

func sovCarbonapiV3Pb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCarbonapiV3Pb(x uint64) (n int) {
	return sovCarbonapiV3Pb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FilteringFunction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilteringFunction{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Arguments:` + fmt.Sprintf("%v", this.Arguments) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CapabilityRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CapabilityRequest{`,
		`}`,
	}, "")
	return s
}
func (this *CapabilityResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CapabilityResponse{`,
		`SupportedProtocols:` + fmt.Sprintf("%v", this.SupportedProtocols) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`HighPrecisionTimestamps:` + fmt.Sprintf("%v", this.HighPrecisionTimestamps) + `,`,
		`SupportFilteringFunctions:` + fmt.Sprintf("%v", this.SupportFilteringFunctions) + `,`,
		`LikeSplittedRequests:` + fmt.Sprintf("%v", this.LikeSplittedRequests) + `,`,
		`SupportStreaming:` + fmt.Sprintf("%v", this.SupportStreaming) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FetchRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FetchRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`StopTime:` + fmt.Sprintf("%v", this.StopTime) + `,`,
		`HighPrecisionTimestamps:` + fmt.Sprintf("%v", this.HighPrecisionTimestamps) + `,`,
		`PathExpression:` + fmt.Sprintf("%v", this.PathExpression) + `,`,
		`FilterFunctions:` + strings.Replace(fmt.Sprintf("%v", this.FilterFunctions), "FilteringFunction", "FilteringFunction", 1) + `,`,
		`MaxDataPoints:` + fmt.Sprintf("%v", this.MaxDataPoints) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MultiFetchRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MultiFetchRequest{`,
		`Metrics:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Metrics), "FetchRequest", "FetchRequest", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FetchResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FetchResponse{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`PathExpression:` + fmt.Sprintf("%v", this.PathExpression) + `,`,
		`ConsolidationFunc:` + fmt.Sprintf("%v", this.ConsolidationFunc) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`StopTime:` + fmt.Sprintf("%v", this.StopTime) + `,`,
		`StepTime:` + fmt.Sprintf("%v", this.StepTime) + `,`,
		`XFilesFactor:` + fmt.Sprintf("%v", this.XFilesFactor) + `,`,
		`HighPrecisionTimestamps:` + fmt.Sprintf("%v", this.HighPrecisionTimestamps) + `,`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`AppliedFunctions:` + fmt.Sprintf("%v", this.AppliedFunctions) + `,`,
		`RequestStartTime:` + fmt.Sprintf("%v", this.RequestStartTime) + `,`,
		`RequestStopTime:` + fmt.Sprintf("%v", this.RequestStopTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MultiFetchResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MultiFetchResponse{`,
		`Metrics:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Metrics), "FetchResponse", "FetchResponse", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MultiGlobRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MultiGlobRequest{`,
		`Metrics:` + fmt.Sprintf("%v", this.Metrics) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`StopTime:` + fmt.Sprintf("%v", this.StopTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobMatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobMatch{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`IsLeaf:` + fmt.Sprintf("%v", this.IsLeaf) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobResponse{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Matches:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Matches), "GlobMatch", "GlobMatch", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MultiGlobResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MultiGlobResponse{`,
		`Metrics:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Metrics), "GlobResponse", "GlobResponse", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetricsInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetricsInfoRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MultiMetricsInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MultiMetricsInfoRequest{`,
		`Names:` + fmt.Sprintf("%v", this.Names) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Retention) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Retention{`,
		`SecondsPerPoint:` + fmt.Sprintf("%v", this.SecondsPerPoint) + `,`,
		`NumberOfPoints:` + fmt.Sprintf("%v", this.NumberOfPoints) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetricsInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetricsInfoResponse{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ConsolidationFunc:` + fmt.Sprintf("%v", this.ConsolidationFunc) + `,`,
		`MaxRetention:` + fmt.Sprintf("%v", this.MaxRetention) + `,`,
		`XFilesFactor:` + fmt.Sprintf("%v", this.XFilesFactor) + `,`,
		`Retentions:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Retentions), "Retention", "Retention", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MultiMetricsInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MultiMetricsInfoResponse{`,
		`Metrics:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Metrics), "MetricsInfoResponse", "MetricsInfoResponse", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ZipperInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForInfo := make([]string, 0, len(this.Info))
	for k, _ := range this.Info {
		keysForInfo = append(keysForInfo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForInfo)
	mapStringForInfo := "map[string]MultiMetricsInfoResponse{"
	for _, k := range keysForInfo {
		mapStringForInfo += fmt.Sprintf("%v: %v,", k, this.Info[k])
	}
	mapStringForInfo += "}"
	s := strings.Join([]string{`&ZipperInfoResponse{`,
		`Info:` + mapStringForInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListMetricsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListMetricsResponse{`,
		`Metrics:` + fmt.Sprintf("%v", this.Metrics) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetricDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetricDetails{`,
		`Size_:` + fmt.Sprintf("%v", this.Size_) + `,`,
		`ModTime:` + fmt.Sprintf("%v", this.ModTime) + `,`,
		`ATime:` + fmt.Sprintf("%v", this.ATime) + `,`,
		`RdTime:` + fmt.Sprintf("%v", this.RdTime) + `,`,
		`RealSize:` + fmt.Sprintf("%v", this.RealSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetricDetailsResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForMetrics := make([]string, 0, len(this.Metrics))
	for k, _ := range this.Metrics {
		keysForMetrics = append(keysForMetrics, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetrics)
	mapStringForMetrics := "map[string]*MetricDetails{"
	for _, k := range keysForMetrics {
		mapStringForMetrics += fmt.Sprintf("%v: %v,", k, this.Metrics[k])
	}
	mapStringForMetrics += "}"
	s := strings.Join([]string{`&MetricDetailsResponse{`,
		`Metrics:` + mapStringForMetrics + `,`,
		`FreeSpace:` + fmt.Sprintf("%v", this.FreeSpace) + `,`,
		`TotalSpace:` + fmt.Sprintf("%v", this.TotalSpace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MultiDetailsResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForMetrics := make([]string, 0, len(this.Metrics))
	for k, _ := range this.Metrics {
		keysForMetrics = append(keysForMetrics, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetrics)
	mapStringForMetrics := "map[string]*MetricDetailsResponse{"
	for _, k := range keysForMetrics {
		mapStringForMetrics += fmt.Sprintf("%v: %v,", k, this.Metrics[k])
	}
	mapStringForMetrics += "}"
	s := strings.Join([]string{`&MultiDetailsResponse{`,
		`Metrics:` + mapStringForMetrics + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCarbonapiV3Pb(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FilteringFunction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilteringFunction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilteringFunction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapabilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapabilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapabilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapabilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapabilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapabilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedProtocols", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedProtocols = append(m.SupportedProtocols, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighPrecisionTimestamps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HighPrecisionTimestamps = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportFilteringFunctions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportFilteringFunctions = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeSplittedRequests", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LikeSplittedRequests = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportStreaming", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportStreaming = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopTime", wireType)
			}
			m.StopTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StopTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighPrecisionTimestamps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HighPrecisionTimestamps = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathExpression", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathExpression = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterFunctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilterFunctions = append(m.FilterFunctions, &FilteringFunction{})
			if err := m.FilterFunctions[len(m.FilterFunctions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDataPoints", wireType)
			}
			m.MaxDataPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDataPoints |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiFetchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiFetchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiFetchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, FetchRequest{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathExpression", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathExpression = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsolidationFunc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsolidationFunc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopTime", wireType)
			}
			m.StopTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StopTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepTime", wireType)
			}
			m.StepTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StepTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field XFilesFactor", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.XFilesFactor = float32(math.Float32frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighPrecisionTimestamps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HighPrecisionTimestamps = bool(v != 0)
		case 9:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Values = append(m.Values, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCarbonapiV3Pb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCarbonapiV3Pb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Values) == 0 {
					m.Values = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Values = append(m.Values, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedFunctions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppliedFunctions = append(m.AppliedFunctions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestStartTime", wireType)
			}
			m.RequestStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestStartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestStopTime", wireType)
			}
			m.RequestStopTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestStopTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiFetchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiFetchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiFetchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, FetchResponse{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiGlobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiGlobRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiGlobRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopTime", wireType)
			}
			m.StopTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StopTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLeaf", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLeaf = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matches = append(m.Matches, GlobMatch{})
			if err := m.Matches[len(m.Matches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiGlobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiGlobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiGlobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, GlobResponse{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMetricsInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiMetricsInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiMetricsInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Retention) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Retention: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Retention: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondsPerPoint", wireType)
			}
			m.SecondsPerPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondsPerPoint |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfPoints", wireType)
			}
			m.NumberOfPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfPoints |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsolidationFunc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsolidationFunc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetention", wireType)
			}
			m.MaxRetention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRetention |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field XFilesFactor", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.XFilesFactor = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retentions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Retentions = append(m.Retentions, Retention{})
			if err := m.Retentions[len(m.Retentions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMetricsInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiMetricsInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiMetricsInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, MetricsInfoResponse{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZipperInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZipperInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZipperInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = make(map[string]MultiMetricsInfoResponse)
			}
			var mapkey string
			mapvalue := &MultiMetricsInfoResponse{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCarbonapiV3Pb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCarbonapiV3Pb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCarbonapiV3Pb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCarbonapiV3Pb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCarbonapiV3Pb
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthCarbonapiV3Pb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MultiMetricsInfoResponse{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCarbonapiV3Pb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Info[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMetricsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModTime", wireType)
			}
			m.ModTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ATime", wireType)
			}
			m.ATime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ATime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdTime", wireType)
			}
			m.RdTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RdTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealSize", wireType)
			}
			m.RealSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = make(map[string]*MetricDetails)
			}
			var mapkey string
			var mapvalue *MetricDetails
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCarbonapiV3Pb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCarbonapiV3Pb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCarbonapiV3Pb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCarbonapiV3Pb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCarbonapiV3Pb
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthCarbonapiV3Pb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MetricDetails{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCarbonapiV3Pb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metrics[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeSpace", wireType)
			}
			m.FreeSpace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeSpace |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSpace", wireType)
			}
			m.TotalSpace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSpace |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = make(map[string]*MetricDetailsResponse)
			}
			var mapkey string
			var mapvalue *MetricDetailsResponse
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCarbonapiV3Pb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCarbonapiV3Pb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCarbonapiV3Pb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCarbonapiV3Pb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCarbonapiV3Pb
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthCarbonapiV3Pb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MetricDetailsResponse{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCarbonapiV3Pb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metrics[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Pb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Pb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCarbonapiV3Pb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCarbonapiV3Pb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCarbonapiV3Pb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCarbonapiV3Pb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCarbonapiV3Pb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCarbonapiV3Pb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCarbonapiV3Pb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCarbonapiV3Pb   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("carbonapi_v3_pb.proto", fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f)
}

var fileDescriptor_carbonapi_v3_pb_47a12e63c18fc98f = []byte{
	// 1111 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcb, 0x6e, 0xdb, 0x46,
	0x17, 0x16, 0x25, 0xf9, 0xa2, 0x63, 0xf9, 0xb7, 0x3d, 0x76, 0xfe, 0xb0, 0x42, 0xcb, 0x1a, 0x44,
	0x10, 0xa8, 0x45, 0x63, 0x03, 0x72, 0x80, 0x06, 0x41, 0x7a, 0x4b, 0x6d, 0x05, 0x05, 0x6c, 0xd4,
	0xa0, 0xbd, 0x0a, 0xd0, 0xa6, 0x23, 0x6a, 0x24, 0x0d, 0x42, 0x72, 0x58, 0xce, 0x28, 0xb0, 0xbb,
	0xca, 0xae, 0xdb, 0x3e, 0x46, 0x97, 0x45, 0xdf, 0xa0, 0xab, 0x7a, 0xe9, 0x65, 0x56, 0x45, 0x2d,
	0x6f, 0xba, 0xcc, 0x23, 0x14, 0x33, 0x1c, 0xd1, 0xbc, 0x49, 0x31, 0xba, 0x9b, 0x73, 0x9d, 0x73,
	0xbe, 0xef, 0xcc, 0xa1, 0x04, 0x77, 0x5c, 0x1c, 0xf5, 0x58, 0x80, 0x43, 0xfa, 0xe2, 0xd5, 0xde,
	0x8b, 0xb0, 0xb7, 0x13, 0x46, 0x4c, 0x30, 0xb4, 0x96, 0x53, 0xb7, 0x1e, 0x0c, 0xa9, 0x18, 0x8d,
	0x7b, 0x3b, 0x2e, 0xf3, 0x77, 0x87, 0x6c, 0xc8, 0x76, 0x95, 0x5f, 0x6f, 0x3c, 0x50, 0x92, 0x12,
	0xd4, 0x29, 0x8e, 0xb7, 0x0f, 0x60, 0xa3, 0x4b, 0x3d, 0x41, 0x22, 0x1a, 0x0c, 0xbb, 0xe3, 0xc0,
	0x15, 0x94, 0x05, 0x08, 0x41, 0x3d, 0xc0, 0x3e, 0x31, 0x8d, 0x6d, 0xa3, 0xdd, 0x70, 0xd4, 0x19,
	0xbd, 0x0f, 0x0d, 0x1c, 0x0d, 0xc7, 0x3e, 0x09, 0x04, 0x37, 0xab, 0xdb, 0xb5, 0x76, 0xc3, 0xb9,
	0x51, 0xd8, 0x9b, 0xb0, 0xf1, 0x35, 0x0e, 0x71, 0x8f, 0x7a, 0x54, 0x9c, 0x3b, 0xe4, 0xc7, 0x31,
	0xe1, 0xc2, 0xfe, 0xad, 0x0a, 0x28, 0xad, 0xe5, 0x21, 0x0b, 0x38, 0x41, 0x3b, 0x80, 0xf8, 0x38,
	0x0c, 0x59, 0x24, 0x48, 0xff, 0x58, 0x16, 0xe1, 0x32, 0x8f, 0x9b, 0x86, 0x4a, 0x59, 0x62, 0x49,
	0xaa, 0xa9, 0xa6, 0xaa, 0x79, 0x04, 0x77, 0x47, 0x74, 0x38, 0x3a, 0x8e, 0x88, 0x4b, 0x39, 0x65,
	0xc1, 0x29, 0xf5, 0x09, 0x17, 0xd8, 0x0f, 0xb9, 0x59, 0xdb, 0x36, 0xda, 0xcb, 0xce, 0x2c, 0x33,
	0x7a, 0x02, 0xef, 0xe9, 0x3b, 0x0a, 0x7d, 0x73, 0xb3, 0xae, 0x62, 0x67, 0x3b, 0xa0, 0x0e, 0x6c,
	0x79, 0xf4, 0x25, 0x39, 0x09, 0x3d, 0x2a, 0x04, 0xe9, 0xeb, 0x4e, 0xb9, 0xb9, 0xa0, 0x02, 0x4b,
	0x6d, 0xe8, 0x63, 0x58, 0xd7, 0x09, 0x4f, 0x44, 0x44, 0xb0, 0x4f, 0x83, 0xa1, 0xb9, 0xa8, 0xfc,
	0x0b, 0x7a, 0xfb, 0xf7, 0x2a, 0x34, 0xbb, 0x44, 0xb8, 0x23, 0x1d, 0x3d, 0x8b, 0x0a, 0x2e, 0x70,
	0x24, 0x64, 0x57, 0x0a, 0x95, 0x9a, 0x73, 0xa3, 0x40, 0x2d, 0x58, 0xe6, 0x82, 0x85, 0xca, 0x58,
	0x53, 0xc6, 0x44, 0x9e, 0x07, 0x5b, 0x7d, 0x3e, 0x6c, 0xf7, 0xe1, 0x7f, 0x21, 0x16, 0xa3, 0x83,
	0xb3, 0x30, 0x22, 0x5c, 0xda, 0x54, 0xcb, 0x0d, 0x27, 0xa7, 0x45, 0x87, 0xb0, 0x36, 0x50, 0xb0,
	0xdd, 0x80, 0xba, 0xb8, 0x5d, 0x6b, 0xaf, 0x74, 0xec, 0x9d, 0xfc, 0x00, 0x17, 0xe0, 0x75, 0xf2,
	0xa1, 0xe8, 0x1e, 0xac, 0xfa, 0xf8, 0x6c, 0x1f, 0x0b, 0x7c, 0xcc, 0xa8, 0x1c, 0xbc, 0x25, 0xd5,
	0x50, 0x56, 0x69, 0x3b, 0xb0, 0x71, 0x34, 0xf6, 0x04, 0xcd, 0x00, 0xf7, 0x19, 0x2c, 0xf9, 0x44,
	0x44, 0xd4, 0x8d, 0x47, 0x6b, 0xa5, 0xf3, 0x41, 0xb1, 0x80, 0x94, 0xff, 0xd3, 0xfa, 0xc5, 0x5f,
	0x1f, 0x56, 0x9c, 0x69, 0x8c, 0xfd, 0x67, 0x0d, 0x56, 0xb5, 0x5d, 0x8f, 0x6d, 0x19, 0x13, 0x45,
	0x54, 0xaa, 0xa5, 0xa8, 0x7c, 0x02, 0x1b, 0x2e, 0x0b, 0x38, 0xf3, 0x68, 0x1f, 0xcb, 0xce, 0x64,
	0x87, 0x8a, 0x9c, 0x86, 0x53, 0x34, 0x64, 0xf9, 0xad, 0xcf, 0xe3, 0x77, 0x21, 0xc7, 0xaf, 0xb2,
	0x91, 0xd8, 0xb6, 0x38, 0xb5, 0xc5, 0x32, 0xb2, 0xa1, 0x79, 0xd6, 0xa5, 0x1e, 0xe1, 0x5d, 0xec,
	0x0a, 0x16, 0x29, 0x28, 0xab, 0x4e, 0x46, 0x37, 0x6f, 0x3e, 0x96, 0xe7, 0xcf, 0xc7, 0xff, 0x61,
	0xf1, 0x15, 0xf6, 0xc6, 0x84, 0x9b, 0x8d, 0xed, 0x5a, 0xdb, 0x70, 0xb4, 0x24, 0x87, 0x1f, 0x87,
	0xa1, 0x47, 0x49, 0xff, 0x66, 0x20, 0x40, 0x3d, 0xf5, 0x82, 0x5e, 0xfa, 0x46, 0x31, 0x1b, 0x27,
	0x49, 0xfb, 0x2b, 0xaa, 0x8b, 0x82, 0x1e, 0xb5, 0x61, 0x2d, 0xd1, 0x69, 0x30, 0x9a, 0xca, 0x35,
	0xaf, 0xb6, 0x4f, 0x01, 0xa5, 0xa7, 0x43, 0xb3, 0xf9, 0x79, 0x7e, 0x3c, 0xac, 0x59, 0xe3, 0x11,
	0x07, 0xe4, 0xe7, 0x63, 0x00, 0xeb, 0x2a, 0xeb, 0x33, 0x8f, 0xf5, 0xa6, 0x23, 0x67, 0x66, 0x73,
	0x36, 0x12, 0xef, 0xff, 0xfe, 0x62, 0xed, 0x4f, 0xa1, 0x21, 0xaf, 0x38, 0xc2, 0xc2, 0x1d, 0xc9,
	0x11, 0x94, 0x83, 0x35, 0x1d, 0x41, 0x79, 0x96, 0xc0, 0x53, 0x7e, 0x48, 0xf0, 0x40, 0xe5, 0x5d,
	0x76, 0xb4, 0x64, 0x7f, 0x0f, 0xcd, 0xb8, 0xb6, 0x39, 0xe3, 0xfb, 0x18, 0x96, 0x7c, 0x99, 0x98,
	0xc4, 0x1b, 0x7d, 0xa5, 0xd3, 0x2a, 0x80, 0x90, 0x5c, 0x9e, 0x00, 0x10, 0x07, 0x24, 0x8f, 0x2e,
	0x73, 0xc9, 0x2d, 0x1e, 0x5d, 0xda, 0x3f, 0x0f, 0x6a, 0x1b, 0xd0, 0x51, 0x7c, 0xfc, 0x26, 0x18,
	0xb0, 0x39, 0x2b, 0xd0, 0xde, 0x85, 0xbb, 0xea, 0xf6, 0x12, 0xf7, 0x2d, 0x58, 0x90, 0x2e, 0x53,
	0x0e, 0x62, 0xc1, 0xfe, 0x0e, 0x1a, 0x0e, 0x11, 0x24, 0x50, 0xdf, 0xb7, 0x36, 0xac, 0x71, 0xe2,
	0xb2, 0xa0, 0xcf, 0x8f, 0x49, 0xa4, 0x96, 0x88, 0x4a, 0x5e, 0x73, 0xf2, 0x6a, 0xf9, 0xc0, 0x83,
	0xb1, 0xdf, 0x23, 0xd1, 0xb7, 0x03, 0xbd, 0x81, 0x62, 0xf6, 0x72, 0x5a, 0xfb, 0xca, 0x80, 0xcd,
	0x4c, 0x2d, 0x73, 0x50, 0x2f, 0x5d, 0x06, 0xd5, 0x59, 0xcb, 0xc0, 0x86, 0xa6, 0x8f, 0xcf, 0x92,
	0xda, 0xf5, 0x80, 0x64, 0x74, 0x85, 0xa7, 0x5d, 0x2f, 0x79, 0xda, 0x5f, 0x02, 0x44, 0xd3, 0x00,
	0xf9, 0xbd, 0x2a, 0xa7, 0x3b, 0xc9, 0xa9, 0xa9, 0x49, 0xc5, 0xd8, 0x3f, 0x80, 0x59, 0xc4, 0x5c,
	0xf7, 0xb9, 0x9f, 0x27, 0xfe, 0x5e, 0x21, 0x75, 0x49, 0x58, 0x9e, 0xff, 0x3f, 0x0c, 0x40, 0xcf,
	0x69, 0x18, 0x92, 0x28, 0x93, 0xfc, 0x19, 0xd4, 0x69, 0x30, 0x60, 0x3a, 0xf3, 0x83, 0x42, 0xe6,
	0x62, 0xc8, 0x8e, 0x14, 0x0e, 0x02, 0x11, 0x9d, 0xeb, 0x2b, 0x54, 0x82, 0x56, 0x0f, 0x1a, 0x89,
	0x01, 0xad, 0x43, 0xed, 0x25, 0x39, 0xd7, 0xcc, 0xc8, 0x23, 0xfa, 0x02, 0x16, 0xd4, 0xd6, 0x52,
	0x64, 0xac, 0x74, 0x3e, 0x2a, 0xb6, 0x30, 0xa3, 0x7d, 0x27, 0x8e, 0x7b, 0x5c, 0x7d, 0x64, 0xd8,
	0xbb, 0xb0, 0x79, 0x48, 0xb9, 0xd0, 0x5e, 0x49, 0x0f, 0x26, 0x2c, 0x1d, 0x65, 0x77, 0x83, 0x16,
	0xed, 0x9f, 0x0d, 0x58, 0x8d, 0xcf, 0xfb, 0x44, 0x60, 0x1a, 0xff, 0xe0, 0x39, 0xa1, 0x3f, 0x4d,
	0x17, 0x85, 0x3a, 0xab, 0x78, 0xd6, 0x4f, 0xad, 0x88, 0xa9, 0x28, 0xe7, 0xfd, 0xab, 0xd4, 0x97,
	0x22, 0x16, 0xe4, 0x5a, 0x70, 0xfa, 0xa9, 0x6f, 0x84, 0x96, 0xe4, 0xae, 0x71, 0x08, 0xf6, 0x54,
	0x7e, 0xfd, 0x85, 0x98, 0xca, 0xf6, 0xeb, 0x2a, 0xdc, 0xc9, 0x54, 0x92, 0x54, 0x7f, 0x94, 0xa7,
	0x77, 0x6f, 0x06, 0xbd, 0xb9, 0xc0, 0x29, 0xe9, 0x0a, 0xf1, 0xcc, 0x3a, 0xec, 0x46, 0x84, 0x9c,
	0x84, 0xd8, 0x8d, 0xbb, 0xac, 0x3b, 0x37, 0x0a, 0x64, 0x01, 0x9c, 0x32, 0x81, 0xbd, 0xd8, 0x5c,
	0x53, 0xe6, 0x94, 0xa6, 0xf5, 0x1c, 0x9a, 0xe9, 0xb4, 0x25, 0x44, 0x3e, 0xcc, 0x12, 0x69, 0xbd,
	0xa3, 0xd8, 0x14, 0x7b, 0x17, 0x06, 0x6c, 0x29, 0x96, 0xf3, 0x08, 0x1c, 0xe6, 0x11, 0xe8, 0x94,
	0x4f, 0xc7, 0xad, 0x00, 0x68, 0xf5, 0xde, 0xd9, 0xc2, 0x93, 0x6c, 0x0b, 0xf7, 0x6f, 0x87, 0x77,
	0xaa, 0x95, 0xa7, 0x0f, 0x2f, 0xaf, 0xac, 0xca, 0x9b, 0x2b, 0xab, 0xf2, 0xf6, 0xca, 0x32, 0x5e,
	0x4f, 0x2c, 0xe3, 0xd7, 0x89, 0x65, 0x5c, 0x4c, 0x2c, 0xe3, 0x72, 0x62, 0x19, 0x7f, 0x4f, 0x2c,
	0xe3, 0x9f, 0x89, 0x55, 0x79, 0x3b, 0xb1, 0x8c, 0x5f, 0xae, 0xad, 0xca, 0xe5, 0xb5, 0x55, 0x79,
	0x73, 0x6d, 0x55, 0x7a, 0x8b, 0xea, 0x6f, 0xc1, 0xde, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb2,
	0xd9, 0xde, 0x44, 0x6f, 0x0c, 0x00, 0x00,
}
